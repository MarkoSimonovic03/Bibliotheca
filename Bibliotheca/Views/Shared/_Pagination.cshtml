@model Bibliotheca.Models.ViewModels.PaginationViewModel

@{
	var pages = new List<int>();
	var TotalPages = Model.TotalPages;
	var PageCount = Model.PageCount;
	var PageSize = Model.PageSize;

	var email = Model.Email ?? string.Empty;
	var loanStatus = (Model.LoanStatus != null && Model.LoanStatus.Any()) ? string.Join(",", Model.LoanStatus) : string.Empty;
	var loanDate = Model.LoanDate?.ToString("MM/dd/yyyy") ?? string.Empty;
	var title = Model.Title ?? string.Empty;
	var author = Model.Author ?? string.Empty;
	var categories = (Model.SelectedCategories != null && Model.SelectedCategories.Any()) ? string.Join(",", Model.SelectedCategories) : string.Empty;

	string BuildQueryString(int page)
	{
		var queryParams = new List<string> { $"pageCount={page}", $"pageSize={PageSize}" };

		if (!string.IsNullOrWhiteSpace(email)) queryParams.Add($"email={email}");
		if (!string.IsNullOrWhiteSpace(title)) queryParams.Add($"title={title}");
		if (!string.IsNullOrWhiteSpace(author)) queryParams.Add($"author={author}");
		if (!string.IsNullOrWhiteSpace(categories)) queryParams.Add($"categories={categories}");
		if (!string.IsNullOrWhiteSpace(loanStatus)) queryParams.Add($"loanStatus={loanStatus}");
		if (!string.IsNullOrWhiteSpace(loanDate)) queryParams.Add($"loanDate={loanDate}");

		return "?" + string.Join("&", queryParams);
	}

	if (PageCount <= 5)
	{
		for (int i = 1; i <= PageCount; i++)
		{
			pages.Add(i);
		}
	}
	else
	{
		pages.AddRange(new[] { 1, -1, PageCount - 2, PageCount - 1, PageCount });
	}

	if (TotalPages - PageCount <= 4)
	{
		for (int i = PageCount + 1; i <= TotalPages; i++)
		{
			pages.Add(i);
		}
	}
	else
	{
		pages.AddRange(new[] { PageCount + 1, PageCount + 2, -1, TotalPages });
	}
}
@* <input type="hidden" name="pageCount" id="pageCount" value="@PageCount" />
<input type="hidden" name="pageSize" id="pageSize" value="@PageSize" /> *@

@if (TotalPages > 1)
{
	<section>
		<div class="container px-5 pb-5">
			<div class="d-flex justify-content-center align-items-center gap-2 text-center">
				@if (PageCount > 1 && TotalPages>2)
				{
					<div class="pagination-element">
						<a href="@BuildQueryString(PageCount - 1)" class="pagination-link pagination-prev">Prev</a>
					</div>
				}

				<div class="pagination-element pagination-links">
					@foreach (var i in pages)
					{
						if (i != -1)
						{
							<a href="@BuildQueryString(i)" class="pagination-link @(i == PageCount ? "pagination-current" : "")">@i</a>
						}
						else
						{
							<div class="d-flex align-items-center px-3 pagination-empty"><span>...</span></div>
						}
					}
				</div>

				@if (PageCount < TotalPages && TotalPages > 2)
				{
					<div class="pagination-element">
						<a href="@BuildQueryString(PageCount + 1)" class="pagination-link pagination-next">Next</a>
					</div>
				}
			</div>
		</div>
	</section>
}